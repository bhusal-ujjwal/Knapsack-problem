# -*- coding: utf-8 -*-
"""MI Task 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lgNx3jc0eRLaud6LRy8R9Lk3uG9_wjVb
"""

# Knapsack problem (KP)

# Implement the Knapsack problem (KP) in Python/Mathematica and find the best solution using the brute force method.
# The problem description can be found in this course's related lectures or link wiki.
# If you submit your first attempt after a deadline, you will receive -2 points. The maximum points achievable for this task is 10 points.
# You have two attempts to accomplish this task (the second attempt can be submitted after the deadline without any further penalization).
# Problem description:
# All items are generated randomly, and each item has the following properties:
# The Volume of the item
# Cost of the item
# The knapsack has some maximal limit of Volume, which can't be violated.
# For the output, print all the items (their cost and volume).
# And the best-found solution (which items are put together and the maximum cost and volume of the combination).
# Also, print the total time needed for the brute force method.

import itertools
import random
import time

# Generate random items
def generate_items(num_items, min_volume, max_volume, min_cost, max_cost):
    items = []
    for _ in range(num_items):
        volume = random.uniform(min_volume, max_volume)
        cost = random.uniform(min_cost, max_cost)
        items.append((volume, cost))
    return items

# Calculate total volume and cost of a combination
def calculate_total(combination):
    total_volume = sum(item[0] for item in combination)
    total_cost = sum(item[1] for item in combination)
    return total_volume, total_cost

# Brute force knapsack solver
def knapsack_bruteforce(items, volume_limit):
    best_cost = 0
    best_combination = None

    for i in range(len(items) + 1):
        for combination in itertools.combinations(items, i):
            total_volume, total_cost = calculate_total(combination)
            if total_volume <= volume_limit and total_cost > best_cost:
                best_cost = total_cost
                best_combination = combination

    return best_combination, best_cost

# Set parameters
num_items = 10
min_volume = 1
max_volume = 10
min_cost = 10
max_cost = 100
volume_limit = 30

# Generate items
items = generate_items(num_items, min_volume, max_volume, min_cost, max_cost)
print("Items (volume, cost):")
for item in items:
    print(item)

# Solve the problem using brute force
start_time = time.time()
best_combination, best_cost = knapsack_bruteforce(items, volume_limit)
end_time = time.time()

# Print the results
print("\nBest solution:")
for item in best_combination:
    print(item)
print(f"Total cost: {best_cost}")
print(f"Total volume: {sum(item[0] for item in best_combination)}")
print(f"\nTime taken for brute force: {end_time - start_time} seconds")

